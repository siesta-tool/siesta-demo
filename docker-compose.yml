services:
  preprocess:
    image: mavroudo/siesta-preprocess
    ports:
      - "8000:8000"
      - "4040:4040"
    networks:
      - siesta-net
    volumes:
      - preprocesses:/app/pythonAPI/dbSQL
      - ./datasets:/app/pythonAPI/uploadedfiles
    environment:
      s3accessKeyAws: minioadmin
      s3ConnectionTimeout: 600000
      s3endPointLoc: http://minio:9000
      s3secretKeyAws: minioadmin
      kafkaBroker: http://kafka:9092
      kafkaTopic: test
      POSTGRES_ENDPOINT: postgres:5432/metrics
      POSTGRES_USERNAME: admin
      POSTGRES_PASSWORD: admin
  query:
    image: mavroudo/siesta-query
    environment:
      master.uri: local[4] # or local[*]
      database: s3
      delta: false # true for streaming, false for batching
      s3.endpoint: http://minio:9000
      s3.user: minioadmin
      s3.key: minioadmin
      s3.timetout: 600000
      server.port: 8090 # port of the application
    ports:
      - '8090:8090'
    networks:
      - siesta-net
    depends_on:
      - createbuckets

  ui:
    image: mavroudo/siesta-ui
    ports:
      - "80:80"
      # if you want to modify the base url (for setting it to a server, add and modify the config.json file
  #    volumes:
  #      - ./config.json:/usr/share/nginx/html/config.json

  minio:
    image: minio/minio:RELEASE.2023-11-01T01-57-10Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    networks:
      - siesta-net
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - siesta-net
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9093,OUTSIDE://siesta-kafka:9092
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #    volumes:
    #      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - siesta-net
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9093 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic test --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9093 --list
      "
    networks:
      - siesta-net
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: metrics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - siesta-net

  createbuckets: #automatically creates the required bucket
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/siesta;
      /usr/bin/mc policy download myminio/siesta;
      exit 0;
      "
    networks:
      - siesta-net

networks:
  siesta-net:
    name: siesta-net

volumes:
  minio_storage: {}
  preprocesses: {}
  postgres-data: {}